require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BasketsController do

  # This should return the minimal set of attributes required to create a valid
  # Basket. As you add validations to Basket, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for :basket }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BasketsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all baskets as @baskets" do
      count_before = Basket.count
      basket = create :basket
      get :index, {}, valid_session
      assigns(:baskets).count.should be count_before + 1   
    end
  end

  describe "GET show" do
    it "assigns the requested basket as @basket" do
      basket = create :basket
      get :show, {:id => basket.to_param}, valid_session
      assigns(:basket).should eq(basket)
    end
  end

  describe "GET new" do
    it "assigns a new basket as @basket" do
      get :new, {}, valid_session
      assigns(:basket).should be_a_new(Basket)
    end
  end

  describe "GET edit" do
    it "assigns the requested basket as @basket" do
      basket = create :basket
      get :edit, {:id => basket.to_param}, valid_session
      assigns(:basket).should eq(basket)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Basket" do
        expect {
          post :create, {:basket => valid_attributes}, valid_session
        }.to change(Basket, :count).by(1)
      end

      it "assigns a newly created basket as @basket" do
        post :create, {:basket => valid_attributes}, valid_session
        assigns(:basket).should be_a(Basket)
        assigns(:basket).should be_persisted
      end

      it "redirects to the created basket" do
        post :create, {:basket => valid_attributes}, valid_session
        response.should redirect_to(Basket.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved basket as @basket" do
        # Trigger the behavior that occurs when invalid params are submitted
        Basket.any_instance.stub(:save).and_return(false)
        post :create, {:basket => {  :name => "" }}, valid_session
        assigns(:basket).should be_a_new(Basket)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Basket.any_instance.stub(:save).and_return(false)
        post :create, {:basket => {  :name => "" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "assigns the requested basket as @basket" do
        basket = create :basket
        put :update, {:id => basket.to_param, :basket => valid_attributes}, valid_session
        assigns(:basket).should eq(basket)
      end

      it "redirects to the basket" do
        basket = create :basket
        put :update, {:id => basket.to_param, :basket => valid_attributes}, valid_session
        response.should redirect_to(basket)
      end
    end

    describe "with invalid params" do
      it "assigns the basket as @basket" do
        basket = create :basket
        # Trigger the behavior that occurs when invalid params are submitted
        Basket.any_instance.stub(:save).and_return(false)
        put :update, {:id => basket.to_param, :basket => {  :name => "" }}, valid_session
        assigns(:basket).should eq(basket)
      end

      it "re-renders the 'edit' template" do
        basket = create :basket
        # Trigger the behavior that occurs when invalid params are submitted
        Basket.any_instance.stub(:save).and_return(false)
        put :update, {:id => basket.to_param, :basket => {  :name => "" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested basket" do
      basket = create :basket
      expect {
        delete :destroy, {:id => basket.to_param}, valid_session
      }.to change(Basket, :count).by(-1)
    end

    it "redirects to the baskets list" do
      basket = create :basket
      delete :destroy, {:id => basket.to_param}, valid_session
      response.should redirect_to(baskets_url)
    end
  end

end
